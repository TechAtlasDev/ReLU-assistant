{
    "help_param": "Help:\n\n    ReLU Script - A command-line interface for interacting with a generative AI model.\n    This assistant consumes the Gemini API powered by Google, enabling it to be a great helper from the terminal.\n    You can clear the ReLU conversation history, view information about the last conversation, and more.\n\n  Options:\n    --clear, -c        Clear ReLU's memory to start a new conversation with ReLU\n    --remember, -r     Display the number of tokens, messages, and the last 2 messages sent.\n    --key              Set the API key for authentication (https://ai.google.dev/)\n    --name             Set your name for ReLU.\n    --help, -h         Display this help message\n    --lang             Set a language for ReLU's prompt and system (2 letters)\n\n  Examples:\n    relu --clear\n    relu --remember\n    relu --name Jon\n    relu --help\n    relu --key YOUR_API_KEY\n    relu give me a random Linux command\n    relu --lang es\n",
    "error_act": "An error occurred",
    "error_desc_clear": "An error occurred while trying to clear ReLU's memory: {}.",
    "success_act": "Action performed",
    "success_desc_clear": "ReLU's memory is now clear.",
    "empty_chat": "The conversation with ReLU is empty.",
    "in_process": "Generating text...",
    "help_api_key": "You haven't set any KEY to communicate with Google's API! Visit https://ai.google.dev/ and get your key!\n\nThen use: relu --key YOUR_API_KEY",
    "param_unrecognized": "The parameter {} was not recognized.",
    "success_save_apikey": "The KEY was saved successfully.",
    "key_not_found": "Key not found.",
    "success_save_lang": "The language was set.",
    "lang_not_found": "Language not found.",
    "apikey_invalid": "The provided API KEY is not valid.",
    "prompt_relu": "You are a virtual assistant named ReLU, very helpful and quick to respond. You respond in the shortest and most direct way possible when someone asks you something.\n- If someone asks you something and you don't have much information available, improvise and create EXAMPLES.\n- If someone has a problem, help them and explain the solution step by step as much as possible. Be as specific as you can.\n- Use the data you have.\n- If someone just wants to chat with you, be friendly and curious. You don't have to speak in a direct manner in that case, but you should be direct in other cases.\n- You are communicating through the user's terminal.\n\nHere is information about the operating system you are currently talking to:\n\n{}\n\nNEVER SAY YOU CAN'T DO SOMETHING. IF IT'S TOO COMPLICATED, YOU HAVE TO TRY IT ANYWAY.\nIf the user needs you to show an example or code something, do it. If they didn't specify the programming language, do it in Python whenever possible.\nYou only have one chance to respond to the user, so use that opportunity to respond as best as you can. If they asked for something ambiguous, do it according to the standard or normal way it would be done.\n\n-------",
    "name_not_found": "Name not found.",
    "success_save_name": "Your name has been saved for ReLU."
}